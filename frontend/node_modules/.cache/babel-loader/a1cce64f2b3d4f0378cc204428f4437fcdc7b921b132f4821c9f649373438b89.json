{"ast":null,"code":"var _jsxFileName = \"F:\\\\Sushil\\\\quick-evac\\\\frontend\\\\src\\\\components\\\\EvacuationMap.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport { Box, Typography, Paper } from '@mui/material';\n\n/**\r\n * Component to display a Google Maps with the evacuation route\r\n * \r\n * @param {Object} props - Component props\r\n * @param {Object} props.locationData - Location data from API\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EvacuationMap = ({\n  locationData\n}) => {\n  _s();\n  const mapRef = useRef(null);\n  const mapInstance = useRef(null);\n  useEffect(() => {\n    if (!locationData || !window.google || !window.google.maps) {\n      return;\n    }\n    const {\n      location,\n      zone,\n      evacuation\n    } = locationData;\n\n    // Initialize map\n    if (!mapInstance.current) {\n      mapInstance.current = new window.google.maps.Map(mapRef.current, {\n        center: {\n          lat: location.latitude,\n          lng: location.longitude\n        },\n        zoom: 13,\n        mapTypeId: 'roadmap',\n        mapTypeControl: true,\n        fullscreenControl: true\n      });\n    }\n    const map = mapInstance.current;\n\n    // Clear existing markers and circles\n    map.overlayMapTypes.clear();\n\n    // Add marker for user location\n    new window.google.maps.Marker({\n      position: {\n        lat: location.latitude,\n        lng: location.longitude\n      },\n      map: map,\n      title: 'Your Location',\n      icon: {\n        url: 'http://maps.google.com/mapfiles/ms/icons/blue-dot.png'\n      }\n    });\n\n    // Add circle for danger zone if in one\n    if (locationData.in_danger_zone && zone) {\n      const zoneColors = {\n        RED: '#ff0000',\n        ORANGE: '#ff9800',\n        GREEN: '#4caf50'\n      };\n      new window.google.maps.Circle({\n        center: {\n          lat: zone.latitude,\n          lng: zone.longitude\n        },\n        radius: zone.radius * 1000,\n        // Convert km to m\n        map: map,\n        fillColor: zoneColors[zone.type] || '#ff0000',\n        fillOpacity: 0.3,\n        strokeColor: zoneColors[zone.type] || '#ff0000',\n        strokeWeight: 1\n      });\n    }\n\n    // Add safe zone marker and route if evacuation info is available\n    if (evacuation && evacuation.safe_zone) {\n      // Add marker for safe zone\n      new window.google.maps.Marker({\n        position: {\n          lat: evacuation.safe_zone.latitude,\n          lng: evacuation.safe_zone.longitude\n        },\n        map: map,\n        title: evacuation.safe_zone.name,\n        icon: {\n          url: 'http://maps.google.com/mapfiles/ms/icons/green-dot.png'\n        }\n      });\n\n      // Add circle for safe zone\n      new window.google.maps.Circle({\n        center: {\n          lat: evacuation.safe_zone.latitude,\n          lng: evacuation.safe_zone.longitude\n        },\n        radius: evacuation.safe_zone.radius * 1000,\n        // Convert km to m\n        map: map,\n        fillColor: '#4caf50',\n        fillOpacity: 0.3,\n        strokeColor: '#4caf50',\n        strokeWeight: 1\n      });\n\n      // Draw route if directions are available\n      if (evacuation.directions) {\n        const directionsService = new window.google.maps.DirectionsService();\n        const directionsRenderer = new window.google.maps.DirectionsRenderer({\n          map: map,\n          suppressMarkers: true,\n          polylineOptions: {\n            strokeColor: '#4caf50',\n            strokeWeight: 5\n          }\n        });\n        directionsService.route({\n          origin: {\n            lat: location.latitude,\n            lng: location.longitude\n          },\n          destination: {\n            lat: evacuation.safe_zone.latitude,\n            lng: evacuation.safe_zone.longitude\n          },\n          travelMode: 'DRIVING'\n        }, (response, status) => {\n          if (status === 'OK') {\n            directionsRenderer.setDirections(response);\n\n            // Adjust map bounds to show the entire route\n            const bounds = new window.google.maps.LatLngBounds();\n            bounds.extend({\n              lat: location.latitude,\n              lng: location.longitude\n            });\n            bounds.extend({\n              lat: evacuation.safe_zone.latitude,\n              lng: evacuation.safe_zone.longitude\n            });\n            map.fitBounds(bounds);\n          }\n        });\n      }\n    }\n  }, [locationData]);\n  if (!locationData) {\n    return null;\n  }\n  return /*#__PURE__*/_jsxDEV(Paper, {\n    elevation: 3,\n    sx: {\n      maxWidth: 600,\n      mx: 'auto',\n      mt: 4,\n      overflow: 'hidden'\n    },\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h6\",\n      sx: {\n        p: 2,\n        bgcolor: 'primary.main',\n        color: 'white'\n      },\n      children: \"Evacuation Map\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      ref: mapRef,\n      sx: {\n        width: '100%',\n        height: 400,\n        bgcolor: 'grey.300'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        p: 2,\n        bgcolor: 'grey.100'\n      },\n      children: /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body2\",\n        color: \"text.secondary\",\n        children: locationData.in_danger_zone ? 'Blue marker: Your location. Green marker: Nearest safe zone. Green line: Recommended evacuation route.' : 'You are in a safe location (blue marker).'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 140,\n    columnNumber: 5\n  }, this);\n};\n_s(EvacuationMap, \"jj23UBFmYip2SDX5FMmvO4fZUgM=\");\n_c = EvacuationMap;\nexport default EvacuationMap;\nvar _c;\n$RefreshReg$(_c, \"EvacuationMap\");","map":{"version":3,"names":["React","useEffect","useRef","Box","Typography","Paper","jsxDEV","_jsxDEV","EvacuationMap","locationData","_s","mapRef","mapInstance","window","google","maps","location","zone","evacuation","current","Map","center","lat","latitude","lng","longitude","zoom","mapTypeId","mapTypeControl","fullscreenControl","map","overlayMapTypes","clear","Marker","position","title","icon","url","in_danger_zone","zoneColors","RED","ORANGE","GREEN","Circle","radius","fillColor","type","fillOpacity","strokeColor","strokeWeight","safe_zone","name","directions","directionsService","DirectionsService","directionsRenderer","DirectionsRenderer","suppressMarkers","polylineOptions","route","origin","destination","travelMode","response","status","setDirections","bounds","LatLngBounds","extend","fitBounds","elevation","sx","maxWidth","mx","mt","overflow","children","variant","p","bgcolor","color","fileName","_jsxFileName","lineNumber","columnNumber","ref","width","height","_c","$RefreshReg$"],"sources":["F:/Sushil/quick-evac/frontend/src/components/EvacuationMap.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\r\nimport { Box, Typography, Paper } from '@mui/material';\r\n\r\n/**\r\n * Component to display a Google Maps with the evacuation route\r\n * \r\n * @param {Object} props - Component props\r\n * @param {Object} props.locationData - Location data from API\r\n */\r\nconst EvacuationMap = ({ locationData }) => {\r\n  const mapRef = useRef(null);\r\n  const mapInstance = useRef(null);\r\n  \r\n  useEffect(() => {\r\n    if (!locationData || !window.google || !window.google.maps) {\r\n      return;\r\n    }\r\n    \r\n    const { location, zone, evacuation } = locationData;\r\n    \r\n    // Initialize map\r\n    if (!mapInstance.current) {\r\n      mapInstance.current = new window.google.maps.Map(mapRef.current, {\r\n        center: { lat: location.latitude, lng: location.longitude },\r\n        zoom: 13,\r\n        mapTypeId: 'roadmap',\r\n        mapTypeControl: true,\r\n        fullscreenControl: true,\r\n      });\r\n    }\r\n    \r\n    const map = mapInstance.current;\r\n    \r\n    // Clear existing markers and circles\r\n    map.overlayMapTypes.clear();\r\n    \r\n    // Add marker for user location\r\n    new window.google.maps.Marker({\r\n      position: { lat: location.latitude, lng: location.longitude },\r\n      map: map,\r\n      title: 'Your Location',\r\n      icon: {\r\n        url: 'http://maps.google.com/mapfiles/ms/icons/blue-dot.png',\r\n      },\r\n    });\r\n    \r\n    // Add circle for danger zone if in one\r\n    if (locationData.in_danger_zone && zone) {\r\n      const zoneColors = {\r\n        RED: '#ff0000',\r\n        ORANGE: '#ff9800',\r\n        GREEN: '#4caf50',\r\n      };\r\n      \r\n      new window.google.maps.Circle({\r\n        center: { lat: zone.latitude, lng: zone.longitude },\r\n        radius: zone.radius * 1000, // Convert km to m\r\n        map: map,\r\n        fillColor: zoneColors[zone.type] || '#ff0000',\r\n        fillOpacity: 0.3,\r\n        strokeColor: zoneColors[zone.type] || '#ff0000',\r\n        strokeWeight: 1,\r\n      });\r\n    }\r\n    \r\n    // Add safe zone marker and route if evacuation info is available\r\n    if (evacuation && evacuation.safe_zone) {\r\n      // Add marker for safe zone\r\n      new window.google.maps.Marker({\r\n        position: { \r\n          lat: evacuation.safe_zone.latitude, \r\n          lng: evacuation.safe_zone.longitude \r\n        },\r\n        map: map,\r\n        title: evacuation.safe_zone.name,\r\n        icon: {\r\n          url: 'http://maps.google.com/mapfiles/ms/icons/green-dot.png',\r\n        },\r\n      });\r\n      \r\n      // Add circle for safe zone\r\n      new window.google.maps.Circle({\r\n        center: { \r\n          lat: evacuation.safe_zone.latitude, \r\n          lng: evacuation.safe_zone.longitude \r\n        },\r\n        radius: evacuation.safe_zone.radius * 1000, // Convert km to m\r\n        map: map,\r\n        fillColor: '#4caf50',\r\n        fillOpacity: 0.3,\r\n        strokeColor: '#4caf50',\r\n        strokeWeight: 1,\r\n      });\r\n      \r\n      // Draw route if directions are available\r\n      if (evacuation.directions) {\r\n        const directionsService = new window.google.maps.DirectionsService();\r\n        const directionsRenderer = new window.google.maps.DirectionsRenderer({\r\n          map: map,\r\n          suppressMarkers: true,\r\n          polylineOptions: {\r\n            strokeColor: '#4caf50',\r\n            strokeWeight: 5,\r\n          },\r\n        });\r\n        \r\n        directionsService.route(\r\n          {\r\n            origin: { lat: location.latitude, lng: location.longitude },\r\n            destination: { \r\n              lat: evacuation.safe_zone.latitude, \r\n              lng: evacuation.safe_zone.longitude \r\n            },\r\n            travelMode: 'DRIVING',\r\n          },\r\n          (response, status) => {\r\n            if (status === 'OK') {\r\n              directionsRenderer.setDirections(response);\r\n              \r\n              // Adjust map bounds to show the entire route\r\n              const bounds = new window.google.maps.LatLngBounds();\r\n              bounds.extend({ lat: location.latitude, lng: location.longitude });\r\n              bounds.extend({ \r\n                lat: evacuation.safe_zone.latitude, \r\n                lng: evacuation.safe_zone.longitude \r\n              });\r\n              map.fitBounds(bounds);\r\n            }\r\n          }\r\n        );\r\n      }\r\n    }\r\n  }, [locationData]);\r\n  \r\n  if (!locationData) {\r\n    return null;\r\n  }\r\n  \r\n  return (\r\n    <Paper elevation={3} sx={{ maxWidth: 600, mx: 'auto', mt: 4, overflow: 'hidden' }}>\r\n      <Typography variant=\"h6\" sx={{ p: 2, bgcolor: 'primary.main', color: 'white' }}>\r\n        Evacuation Map\r\n      </Typography>\r\n      \r\n      <Box\r\n        ref={mapRef}\r\n        sx={{\r\n          width: '100%',\r\n          height: 400,\r\n          bgcolor: 'grey.300',\r\n        }}\r\n      />\r\n      \r\n      <Box sx={{ p: 2, bgcolor: 'grey.100' }}>\r\n        <Typography variant=\"body2\" color=\"text.secondary\">\r\n          {locationData.in_danger_zone ? \r\n            'Blue marker: Your location. Green marker: Nearest safe zone. Green line: Recommended evacuation route.' : \r\n            'You are in a safe location (blue marker).'}\r\n        </Typography>\r\n      </Box>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport default EvacuationMap;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}