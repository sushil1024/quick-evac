{"ast":null,"code":"import axios from 'axios';\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\n// Create axios instance with default config\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Location API endpoints\nexport const locationApi = {\n  /**\r\n   * Check if a location is in a danger zone\r\n   * \r\n   * @param {Object} data - Location data\r\n   * @param {string} data.phone_number - User's phone number\r\n   * @param {number} data.latitude - User's latitude\r\n   * @param {number} data.longitude - User's longitude\r\n   * @returns {Promise} - API response\r\n   */\n  checkLocation: data => api.post('/location/check', data)\n};\n\n// Zones API endpoints\nexport const zonesApi = {\n  /**\r\n   * Get all zones or filter by type\r\n   * \r\n   * @param {string} type - Optional zone type filter (RED, ORANGE, GREEN)\r\n   * @returns {Promise} - API response\r\n   */\n  getZones: type => api.get(`/zone${type ? `?type=${type}` : ''}`),\n  /**\r\n   * Get a zone by ID\r\n   * \r\n   * @param {number} id - Zone ID\r\n   * @returns {Promise} - API response\r\n   */\n  getZone: id => api.get(`/zone/${id}`),\n  /**\r\n   * Create a new zone\r\n   * \r\n   * @param {Object} data - Zone data\r\n   * @returns {Promise} - API response\r\n   */\n  createZone: data => api.post('/zone', data),\n  /**\r\n   * Update an existing zone\r\n   * \r\n   * @param {number} id - Zone ID\r\n   * @param {Object} data - Updated zone data\r\n   * @returns {Promise} - API response\r\n   */\n  updateZone: (id, data) => api.put(`/zone/${id}`, data),\n  /**\r\n   * Delete a zone\r\n   * \r\n   * @param {number} id - Zone ID\r\n   * @returns {Promise} - API response\r\n   */\n  deleteZone: id => api.delete(`/zone/${id}`)\n};\nexport default api;","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","locationApi","checkLocation","data","post","zonesApi","getZones","type","get","getZone","id","createZone","updateZone","put","deleteZone","delete"],"sources":["F:/Sushil/quick-evac/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\r\n\r\n// Create axios instance with default config\r\nconst api = axios.create({\r\n  baseURL: API_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Location API endpoints\r\nexport const locationApi = {\r\n  /**\r\n   * Check if a location is in a danger zone\r\n   * \r\n   * @param {Object} data - Location data\r\n   * @param {string} data.phone_number - User's phone number\r\n   * @param {number} data.latitude - User's latitude\r\n   * @param {number} data.longitude - User's longitude\r\n   * @returns {Promise} - API response\r\n   */\r\n  checkLocation: (data) => api.post('/location/check', data),\r\n};\r\n\r\n// Zones API endpoints\r\nexport const zonesApi = {\r\n  /**\r\n   * Get all zones or filter by type\r\n   * \r\n   * @param {string} type - Optional zone type filter (RED, ORANGE, GREEN)\r\n   * @returns {Promise} - API response\r\n   */\r\n  getZones: (type) => api.get(`/zone${type ? `?type=${type}` : ''}`),\r\n  \r\n  /**\r\n   * Get a zone by ID\r\n   * \r\n   * @param {number} id - Zone ID\r\n   * @returns {Promise} - API response\r\n   */\r\n  getZone: (id) => api.get(`/zone/${id}`),\r\n  \r\n  /**\r\n   * Create a new zone\r\n   * \r\n   * @param {Object} data - Zone data\r\n   * @returns {Promise} - API response\r\n   */\r\n  createZone: (data) => api.post('/zone', data),\r\n  \r\n  /**\r\n   * Update an existing zone\r\n   * \r\n   * @param {number} id - Zone ID\r\n   * @param {Object} data - Updated zone data\r\n   * @returns {Promise} - API response\r\n   */\r\n  updateZone: (id, data) => api.put(`/zone/${id}`, data),\r\n  \r\n  /**\r\n   * Delete a zone\r\n   * \r\n   * @param {number} id - Zone ID\r\n   * @returns {Promise} - API response\r\n   */\r\n  deleteZone: (id) => api.delete(`/zone/${id}`),\r\n};\r\n\r\nexport default api;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,2BAA2B;;AAE5E;AACA,MAAMC,GAAG,GAAGL,KAAK,CAACM,MAAM,CAAC;EACvBC,OAAO,EAAEN,OAAO;EAChBO,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMC,WAAW,GAAG;EACzB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,aAAa,EAAGC,IAAI,IAAKN,GAAG,CAACO,IAAI,CAAC,iBAAiB,EAAED,IAAI;AAC3D,CAAC;;AAED;AACA,OAAO,MAAME,QAAQ,GAAG;EACtB;AACF;AACA;AACA;AACA;AACA;EACEC,QAAQ,EAAGC,IAAI,IAAKV,GAAG,CAACW,GAAG,CAAC,QAAQD,IAAI,GAAG,SAASA,IAAI,EAAE,GAAG,EAAE,EAAE,CAAC;EAElE;AACF;AACA;AACA;AACA;AACA;EACEE,OAAO,EAAGC,EAAE,IAAKb,GAAG,CAACW,GAAG,CAAC,SAASE,EAAE,EAAE,CAAC;EAEvC;AACF;AACA;AACA;AACA;AACA;EACEC,UAAU,EAAGR,IAAI,IAAKN,GAAG,CAACO,IAAI,CAAC,OAAO,EAAED,IAAI,CAAC;EAE7C;AACF;AACA;AACA;AACA;AACA;AACA;EACES,UAAU,EAAEA,CAACF,EAAE,EAAEP,IAAI,KAAKN,GAAG,CAACgB,GAAG,CAAC,SAASH,EAAE,EAAE,EAAEP,IAAI,CAAC;EAEtD;AACF;AACA;AACA;AACA;AACA;EACEW,UAAU,EAAGJ,EAAE,IAAKb,GAAG,CAACkB,MAAM,CAAC,SAASL,EAAE,EAAE;AAC9C,CAAC;AAED,eAAeb,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}