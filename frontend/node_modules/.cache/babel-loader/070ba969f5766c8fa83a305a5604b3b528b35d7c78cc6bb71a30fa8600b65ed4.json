{"ast":null,"code":"/**\r\n * Get user's current location using browser's Geolocation API\r\n * \r\n * @returns {Promise} - Resolves with coordinates or rejects with error message\r\n */\nexport const getCurrentLocation = () => {\n  return new Promise((resolve, reject) => {\n    if (!navigator.geolocation) {\n      reject('Geolocation is not supported by your browser');\n      return;\n    }\n    navigator.geolocation.getCurrentPosition(position => {\n      resolve({\n        latitude: position.coords.latitude,\n        longitude: position.coords.longitude\n      });\n    }, error => {\n      let errorMessage = 'Unknown error';\n      switch (error.code) {\n        case error.PERMISSION_DENIED:\n          errorMessage = 'Location permission denied. Please enable location services.';\n          break;\n        case error.POSITION_UNAVAILABLE:\n          errorMessage = 'Location information is unavailable.';\n          break;\n        case error.TIMEOUT:\n          errorMessage = 'The request to get user location timed out.';\n          break;\n        default:\n          errorMessage = 'An unknown error occurred.';\n      }\n      reject(errorMessage);\n    }, {\n      enableHighAccuracy: true,\n      timeout: 10000,\n      maximumAge: 0\n    });\n  });\n};\n\n/**\r\n * Format a phone number for display\r\n * \r\n * @param {string} phoneNumber - Phone number to format\r\n * @returns {string} - Formatted phone number\r\n */\nexport const formatPhoneNumber = phoneNumber => {\n  if (!phoneNumber) return '';\n\n  // Remove all non-digit characters\n  const cleaned = phoneNumber.replace(/\\D/g, '');\n\n  // Check if it's a valid US number (10 digits)\n  if (cleaned.length === 10) {\n    return `(${cleaned.substring(0, 3)}) ${cleaned.substring(3, 6)}-${cleaned.substring(6)}`;\n  } else if (cleaned.length > 10) {\n    // Handle international numbers\n    return `+${cleaned.substring(0, cleaned.length - 10)} (${cleaned.substring(cleaned.length - 10, cleaned.length - 7)}) ${cleaned.substring(cleaned.length - 7, cleaned.length - 4)}-${cleaned.substring(cleaned.length - 4)}`;\n  }\n\n  // If not a standard format, return the cleaned number\n  return cleaned;\n};\n\n/**\r\n * Validate a phone number\r\n * \r\n * @param {string} phoneNumber - Phone number to validate\r\n * @returns {boolean} - Whether the phone number is valid\r\n */\nexport const isValidPhoneNumber = phoneNumber => {\n  if (!phoneNumber) return false;\n\n  // Remove all non-digit characters\n  const cleaned = phoneNumber.replace(/\\D/g, '');\n\n  // Check if it's a valid length (at least 10 digits)\n  return cleaned.length >= 10;\n};","map":{"version":3,"names":["getCurrentLocation","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","position","latitude","coords","longitude","error","errorMessage","code","PERMISSION_DENIED","POSITION_UNAVAILABLE","TIMEOUT","enableHighAccuracy","timeout","maximumAge","formatPhoneNumber","phoneNumber","cleaned","replace","length","substring","isValidPhoneNumber"],"sources":["F:/Sushil/quick-evac/frontend/src/services/location.js"],"sourcesContent":["/**\r\n * Get user's current location using browser's Geolocation API\r\n * \r\n * @returns {Promise} - Resolves with coordinates or rejects with error message\r\n */\r\nexport const getCurrentLocation = () => {\r\n    return new Promise((resolve, reject) => {\r\n      if (!navigator.geolocation) {\r\n        reject('Geolocation is not supported by your browser');\r\n        return;\r\n      }\r\n      \r\n      navigator.geolocation.getCurrentPosition(\r\n        (position) => {\r\n          resolve({\r\n            latitude: position.coords.latitude,\r\n            longitude: position.coords.longitude\r\n          });\r\n        },\r\n        (error) => {\r\n          let errorMessage = 'Unknown error';\r\n          \r\n          switch (error.code) {\r\n            case error.PERMISSION_DENIED:\r\n              errorMessage = 'Location permission denied. Please enable location services.';\r\n              break;\r\n            case error.POSITION_UNAVAILABLE:\r\n              errorMessage = 'Location information is unavailable.';\r\n              break;\r\n            case error.TIMEOUT:\r\n              errorMessage = 'The request to get user location timed out.';\r\n              break;\r\n            default:\r\n              errorMessage = 'An unknown error occurred.';\r\n          }\r\n          \r\n          reject(errorMessage);\r\n        },\r\n        {\r\n          enableHighAccuracy: true,\r\n          timeout: 10000,\r\n          maximumAge: 0\r\n        }\r\n      );\r\n    });\r\n  };\r\n  \r\n  /**\r\n   * Format a phone number for display\r\n   * \r\n   * @param {string} phoneNumber - Phone number to format\r\n   * @returns {string} - Formatted phone number\r\n   */\r\n  export const formatPhoneNumber = (phoneNumber) => {\r\n    if (!phoneNumber) return '';\r\n    \r\n    // Remove all non-digit characters\r\n    const cleaned = phoneNumber.replace(/\\D/g, '');\r\n    \r\n    // Check if it's a valid US number (10 digits)\r\n    if (cleaned.length === 10) {\r\n      return `(${cleaned.substring(0, 3)}) ${cleaned.substring(3, 6)}-${cleaned.substring(6)}`;\r\n    } else if (cleaned.length > 10) {\r\n      // Handle international numbers\r\n      return `+${cleaned.substring(0, cleaned.length - 10)} (${cleaned.substring(cleaned.length - 10, cleaned.length - 7)}) ${cleaned.substring(cleaned.length - 7, cleaned.length - 4)}-${cleaned.substring(cleaned.length - 4)}`;\r\n    }\r\n    \r\n    // If not a standard format, return the cleaned number\r\n    return cleaned;\r\n  };\r\n  \r\n  /**\r\n   * Validate a phone number\r\n   * \r\n   * @param {string} phoneNumber - Phone number to validate\r\n   * @returns {boolean} - Whether the phone number is valid\r\n   */\r\n  export const isValidPhoneNumber = (phoneNumber) => {\r\n    if (!phoneNumber) return false;\r\n    \r\n    // Remove all non-digit characters\r\n    const cleaned = phoneNumber.replace(/\\D/g, '');\r\n    \r\n    // Check if it's a valid length (at least 10 digits)\r\n    return cleaned.length >= 10;\r\n  };"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMA,kBAAkB,GAAGA,CAAA,KAAM;EACpC,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtC,IAAI,CAACC,SAAS,CAACC,WAAW,EAAE;MAC1BF,MAAM,CAAC,8CAA8C,CAAC;MACtD;IACF;IAEAC,SAAS,CAACC,WAAW,CAACC,kBAAkB,CACrCC,QAAQ,IAAK;MACZL,OAAO,CAAC;QACNM,QAAQ,EAAED,QAAQ,CAACE,MAAM,CAACD,QAAQ;QAClCE,SAAS,EAAEH,QAAQ,CAACE,MAAM,CAACC;MAC7B,CAAC,CAAC;IACJ,CAAC,EACAC,KAAK,IAAK;MACT,IAAIC,YAAY,GAAG,eAAe;MAElC,QAAQD,KAAK,CAACE,IAAI;QAChB,KAAKF,KAAK,CAACG,iBAAiB;UAC1BF,YAAY,GAAG,8DAA8D;UAC7E;QACF,KAAKD,KAAK,CAACI,oBAAoB;UAC7BH,YAAY,GAAG,sCAAsC;UACrD;QACF,KAAKD,KAAK,CAACK,OAAO;UAChBJ,YAAY,GAAG,6CAA6C;UAC5D;QACF;UACEA,YAAY,GAAG,4BAA4B;MAC/C;MAEAT,MAAM,CAACS,YAAY,CAAC;IACtB,CAAC,EACD;MACEK,kBAAkB,EAAE,IAAI;MACxBC,OAAO,EAAE,KAAK;MACdC,UAAU,EAAE;IACd,CACF,CAAC;EACH,CAAC,CAAC;AACJ,CAAC;;AAED;AACF;AACA;AACA;AACA;AACA;AACE,OAAO,MAAMC,iBAAiB,GAAIC,WAAW,IAAK;EAChD,IAAI,CAACA,WAAW,EAAE,OAAO,EAAE;;EAE3B;EACA,MAAMC,OAAO,GAAGD,WAAW,CAACE,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC;;EAE9C;EACA,IAAID,OAAO,CAACE,MAAM,KAAK,EAAE,EAAE;IACzB,OAAO,IAAIF,OAAO,CAACG,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,KAAKH,OAAO,CAACG,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,IAAIH,OAAO,CAACG,SAAS,CAAC,CAAC,CAAC,EAAE;EAC1F,CAAC,MAAM,IAAIH,OAAO,CAACE,MAAM,GAAG,EAAE,EAAE;IAC9B;IACA,OAAO,IAAIF,OAAO,CAACG,SAAS,CAAC,CAAC,EAAEH,OAAO,CAACE,MAAM,GAAG,EAAE,CAAC,KAAKF,OAAO,CAACG,SAAS,CAACH,OAAO,CAACE,MAAM,GAAG,EAAE,EAAEF,OAAO,CAACE,MAAM,GAAG,CAAC,CAAC,KAAKF,OAAO,CAACG,SAAS,CAACH,OAAO,CAACE,MAAM,GAAG,CAAC,EAAEF,OAAO,CAACE,MAAM,GAAG,CAAC,CAAC,IAAIF,OAAO,CAACG,SAAS,CAACH,OAAO,CAACE,MAAM,GAAG,CAAC,CAAC,EAAE;EAC9N;;EAEA;EACA,OAAOF,OAAO;AAChB,CAAC;;AAED;AACF;AACA;AACA;AACA;AACA;AACE,OAAO,MAAMI,kBAAkB,GAAIL,WAAW,IAAK;EACjD,IAAI,CAACA,WAAW,EAAE,OAAO,KAAK;;EAE9B;EACA,MAAMC,OAAO,GAAGD,WAAW,CAACE,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC;;EAE9C;EACA,OAAOD,OAAO,CAACE,MAAM,IAAI,EAAE;AAC7B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}